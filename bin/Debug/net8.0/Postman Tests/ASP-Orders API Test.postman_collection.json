{
	"info": {
		"_postman_id": "da7bb6c5-33db-4942-989d-4d8507c2c471",
		"name": "ASP-Orders API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33511578"
	},
	"item": [
		{
			"name": "GET Order API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is of type JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain orders\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    // Check if 'value' property exists and is an array\r",
							"    pm.expect(jsonData).to.have.property(\"value\").that.is.an(\"array\");\r",
							"\r",
							"    // Iterate over each order\r",
							"    jsonData.value.forEach(function(order) {\r",
							"        pm.expect(order).to.be.an(\"object\");\r",
							"        pm.expect(order).to.have.property(\"id\");\r",
							"        pm.expect(order).to.have.property(\"userId\");\r",
							"        pm.expect(order).to.have.property(\"orderDate\");\r",
							"        pm.expect(order).to.have.property(\"totalAmount\");\r",
							"        pm.expect(order).to.have.property(\"orderItems\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7254/api/Order",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7254",
					"path": [
						"api",
						"Order"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Order API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test if the response has a status code of 201\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Test if the response body contains the expected message\r",
							"pm.test(\"Message is 'Order created successfully.'\", function () {\r",
							"    pm.response.to.be.json;\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.value.message).to.equal(\"Order created successfully.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": 1,\r\n    \"orderDate\": \"2024-03-27T12:00:00\",\r\n    \"totalAmount\": 0, // Will be calculated based on the products\r\n    \"orderItems\": [\r\n        {\r\n            \"productId\": 1,\r\n            \"quantity\": 2,\r\n            \"price\": 19.99,\r\n            \"shippingCost\": 6.00\r\n        },\r\n        {\r\n            \"productId\": 2,\r\n            \"quantity\": 1,\r\n            \"price\": 19.99,\r\n            \"shippingCost\": 6.00\r\n        },\r\n        {\r\n            \"productId\": 3,\r\n            \"quantity\": 1,\r\n            \"price\": 19.99,\r\n            \"shippingCost\": 6.00\r\n        }\r\n    ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7254/api/Order",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7254",
					"path": [
						"api",
						"Order"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Order API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 404 (Not Found)\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"// Test for response type JSON\r",
							"pm.test(\"Response is of type JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test for response structure and content\r",
							"pm.test(\"Update Order\", function () {\r",
							"    try {\r",
							"        const responseBody = pm.response.text();\r",
							"        pm.expect(responseBody).to.be.a(\"string\");\r",
							"        pm.expect(responseBody).to.include(\"Order not found\"); // Adjust the expected message according to your API response\r",
							"    } catch (error) {\r",
							"        pm.expect.fail(\"Failed to parse response body as JSON\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": 1,\r\n    \"orderDate\": \"2024-03-27T12:00:00\",\r\n    \"totalAmount\": 39.97, // Updated total amount\r\n    \"orderItems\": [\r\n        {\r\n            \"productId\": 1,\r\n            \"quantity\": 3, // Updated quantity\r\n            \"price\": 19.99,\r\n            \"shippingCost\": 6.00\r\n        }\r\n    ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7254/api/Order/3",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7254",
					"path": [
						"api",
						"Order",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Order API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 404 (Not Found)\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"// Test for response type JSON\r",
							"pm.test(\"Response is of type JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test for response structure and content\r",
							"pm.test(\"Delete Order\", function () {\r",
							"    try {\r",
							"        const responseBody = pm.response.text();\r",
							"        pm.expect(responseBody).to.be.a(\"string\");\r",
							"        pm.expect(responseBody).to.include(\"Order not found\"); // Adjust the expected message according to your API response\r",
							"    } catch (error) {\r",
							"        pm.expect.fail(\"Failed to parse response body as JSON\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 3\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7254/api/Order/3",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7254",
					"path": [
						"api",
						"Order",
						"3"
					]
				}
			},
			"response": []
		}
	]
}