{
	"info": {
		"_postman_id": "570c067b-5eff-41ff-86b0-add5564c20c4",
		"name": "ASP-User API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33511578"
	},
	"item": [
		{
			"name": "GET User API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for response type JSON\r",
							"pm.test(\"Response is of type JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test for response structure and content\r",
							"pm.test(\"Get All Users\", function () {\r",
							"    try {\r",
							"        const responseBody = pm.response.json();\r",
							"        pm.expect(responseBody).to.be.an(\"object\");\r",
							"\r",
							"        // Check if the value property exists and contains an array\r",
							"        pm.expect(responseBody).to.have.property(\"value\");\r",
							"        pm.expect(responseBody.value).to.be.an(\"array\").and.not.empty;\r",
							"\r",
							"        // Check the structure of the first user object in the array\r",
							"        const user = responseBody.value[0];\r",
							"        pm.expect(user).to.have.property(\"id\", 2);\r",
							"        pm.expect(user).to.have.property(\"email\", \"Lalitha@example.com\");\r",
							"        pm.expect(user).to.have.property(\"password\", \"password123\");\r",
							"        pm.expect(user).to.have.property(\"username\", \"lalitha\");\r",
							"        pm.expect(user).to.have.property(\"purchaseHistory\", \"History of purchases...\");\r",
							"        pm.expect(user).to.have.property(\"shippingAddress\", \"123 Main St, City, Country\");\r",
							"        pm.expect(user).to.have.property(\"comments\").that.is.null;\r",
							"    } catch (error) {\r",
							"        pm.expect.fail(\"Failed to parse response body as JSON\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7254/api/User/",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7254",
					"path": [
						"api",
						"User",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "POST User API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 200\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Test for response type JSON\r",
							"pm.test(\"Response is of type JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test for response structure and content\r",
							"pm.test(\"Response should be an object with message 'User created'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.value.message).to.eql(\"User created successfully.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"zzzz@example.com\",\r\n  \"password\": \"password123\",\r\n  \"username\": \"z\",\r\n  \"purchaseHistory\": \"History of purchases...\",\r\n  \"shippingAddress\": \"123 Main St, City, Country\",\r\n  \"comments\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7254/api/User",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7254",
					"path": [
						"api",
						"User"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT User API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Test for response type JSON",
							"pm.test(\"Response is of type JSON\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"// Test for response structure and content",
							"pm.test(\"Message is 'User updated successfully.'\", function () {",
							"    try {",
							"        const responseBody = pm.response.json();",
							"        pm.expect(responseBody.value.message).to.eql(\"User updated successfully.\");",
							"    } catch (error) {",
							"        pm.expect.fail(\"Failed to parse response body as JSON\");",
							"    }",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"Lalitha@example.com\",\r\n  \"password\": \"password123\",\r\n  \"username\": \"lalitha\",\r\n  \"purchaseHistory\": \"History of purchases...\",\r\n  \"shippingAddress\": \"123 Main St, City, Country\",\r\n  \"comments\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7254/api/User/18",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7254",
					"path": [
						"api",
						"User",
						"18"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE User API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 404\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for response type JSON\r",
							"pm.test(\"Response is of type JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test for response structure and content\r",
							"pm.test(\"Delete User\", function () {\r",
							"    try {\r",
							"        const responseBody = pm.response.json();\r",
							"        pm.expect(responseBody.value.message).to.equal(\"User not found\");\r",
							"    } catch (error) {\r",
							"        pm.expect.fail(\"Failed to parse response body as JSON\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user_id\": 3\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7254/api/User/3",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7254",
					"path": [
						"api",
						"User",
						"3"
					]
				}
			},
			"response": []
		}
	]
}