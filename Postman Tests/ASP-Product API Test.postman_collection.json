{
	"info": {
		"_postman_id": "d2b14f3c-7106-4175-b05b-12d91fb366a8",
		"name": "ASP-Product API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33511578"
	},
	"item": [
		{
			"name": "GET Product API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for response type JSON\r",
							"pm.test(\"Response is of type JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test for response structure and content\r",
							"pm.test(\"Get All Products\", function () {\r",
							"    try {\r",
							"        const responseBody = pm.response.json();\r",
							"        pm.expect(responseBody).to.be.an(\"object\");\r",
							"\r",
							"        // Check if the value property exists and contains an array of products\r",
							"        pm.expect(responseBody).to.have.property(\"value\");\r",
							"        pm.expect(responseBody.value).to.be.an(\"array\").and.not.empty;\r",
							"\r",
							"        // Check the structure of the first product object in the array\r",
							"        const product = responseBody.value[0];\r",
							"        pm.expect(product).to.have.property(\"id\");\r",
							"        pm.expect(product).to.have.property(\"description\");\r",
							"        pm.expect(product).to.have.property(\"image\");\r",
							"        pm.expect(product).to.have.property(\"pricing\");\r",
							"        pm.expect(product).to.have.property(\"shippingCost\");\r",
							"        pm.expect(product).to.have.property(\"comments\").that.is.null; // Assuming comments can be null\r",
							"\r",
							"        // Log the response body for further inspection\r",
							"        console.log(\"Response Body:\", responseBody);\r",
							"    } catch (error) {\r",
							"        pm.expect.fail(\"Failed to parse response body as JSON\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7254/api/Product/",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7254",
					"path": [
						"api",
						"Product",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Product API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check status code\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Check if response is in JSON format\r",
							"pm.test(\"Response is in JSON format\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Check if response body is not empty\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.not.be.empty;\r",
							"    console.log(\"Response Body:\", responseBody);\r",
							"});\r",
							"\r",
							"// Check if the message is correct\r",
							"pm.test(\"Message is 'Product created successfully.'\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    console.log(\"Response Body:\", responseBody);\r",
							"    const message = responseBody && responseBody.value && responseBody.value.message ? responseBody.value.message : undefined;\r",
							"    console.log(\"Message:\", message);\r",
							"    pm.expect(message).to.equal(\"Product created successfully.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"description\": \"Sample Product Description\",\r\n  \"image\": \"sample_image.jpg\",\r\n  \"pricing\": 19.99,\r\n  \"shippingCost\": 6.00\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7254/api/Product",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7254",
					"path": [
						"api",
						"Product"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Product API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for response type JSON\r",
							"pm.test(\"Response is of type JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test for response structure and content\r",
							"pm.test(\"Update Product\", function () {\r",
							"    try {\r",
							"        const responseBodyText = pm.response.text(); // Get the response body as text\r",
							"        console.log(\"Response Body Text:\", responseBodyText); // Log the response body text\r",
							"    } catch (error) {\r",
							"        pm.expect.fail(\"Failed to retrieve response body as text\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 1,\r\n  \"description\": \"Updated Description\",\r\n  \"image\": \"updated_image.jpg\",\r\n  \"pricing\": 19.99,\r\n  \"shippingCost\": 5.00\r\n//   \"message\": \"Product updated successfully\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7254/api/Product/3",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7254",
					"path": [
						"api",
						"Product",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Product API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for response type JSON\r",
							"pm.test(\"Response is of type JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test for response structure and content\r",
							"pm.test(\"Delete Product\", function () {\r",
							"    try {\r",
							"        const responseBody = pm.response.json();\r",
							"        pm.expect(responseBody).to.be.an(\"object\");\r",
							"        pm.expect(responseBody.id).to.equal(); // Adjust the property name according to your API response\r",
							"    } catch (error) {\r",
							"        pm.expect.fail(\"Failed to parse response body as JSON\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 5\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7254/api/Product/4",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7254",
					"path": [
						"api",
						"Product",
						"4"
					]
				}
			},
			"response": []
		}
	]
}